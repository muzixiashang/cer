<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.liyunet.mapper.hkMapper.CoinHkOrderMapper" >
  <resultMap id="BaseResultMap" type="com.liyunet.domain.hk.CoinHkOrder" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="userId" property="userid" jdbcType="INTEGER" />
    <result column="pay_num" property="payNum" jdbcType="VARCHAR" />
    <result column="createtime" property="createtime" jdbcType="VARCHAR" />
    <result column="bill_no" property="billNo" jdbcType="VARCHAR" />
    <result column="type" property="type" jdbcType="INTEGER" />
    <result column="token_address" property="tokenAddress" jdbcType="VARCHAR" />
    <result column="toblockid" property="toblockid" jdbcType="INTEGER" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="reason" property="reason" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, userId, pay_num, createtime, bill_no, type, token_address, toblockid, state, 
    reason
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.liyunet.domain.hk.CoinHkOrderExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from coin_hk_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from coin_hk_order
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from coin_hk_order
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.liyunet.domain.hk.CoinHkOrderExample" >
    delete from coin_hk_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.liyunet.domain.hk.CoinHkOrder" >
    insert into coin_hk_order (id, userId, pay_num, 
      createtime, bill_no, type, 
      token_address, toblockid, state, 
      reason)
    values (#{id,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER}, #{payNum,jdbcType=VARCHAR}, 
      #{createtime,jdbcType=VARCHAR}, #{billNo,jdbcType=VARCHAR}, #{type,jdbcType=INTEGER}, 
      #{tokenAddress,jdbcType=VARCHAR}, #{toblockid,jdbcType=INTEGER}, #{state,jdbcType=INTEGER}, 
      #{reason,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.liyunet.domain.hk.CoinHkOrder" >
    insert into coin_hk_order
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userid != null" >
        userId,
      </if>
      <if test="payNum != null" >
        pay_num,
      </if>
      <if test="createtime != null" >
        createtime,
      </if>
      <if test="billNo != null" >
        bill_no,
      </if>
      <if test="type != null" >
        type,
      </if>
      <if test="tokenAddress != null" >
        token_address,
      </if>
      <if test="toblockid != null" >
        toblockid,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="reason != null" >
        reason,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userid != null" >
        #{userid,jdbcType=INTEGER},
      </if>
      <if test="payNum != null" >
        #{payNum,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null" >
        #{createtime,jdbcType=VARCHAR},
      </if>
      <if test="billNo != null" >
        #{billNo,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        #{type,jdbcType=INTEGER},
      </if>
      <if test="tokenAddress != null" >
        #{tokenAddress,jdbcType=VARCHAR},
      </if>
      <if test="toblockid != null" >
        #{toblockid,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="reason != null" >
        #{reason,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.liyunet.domain.hk.CoinHkOrderExample" resultType="java.lang.Integer" >
    select count(*) from coin_hk_order
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update coin_hk_order
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.userid != null" >
        userId = #{record.userid,jdbcType=INTEGER},
      </if>
      <if test="record.payNum != null" >
        pay_num = #{record.payNum,jdbcType=VARCHAR},
      </if>
      <if test="record.createtime != null" >
        createtime = #{record.createtime,jdbcType=VARCHAR},
      </if>
      <if test="record.billNo != null" >
        bill_no = #{record.billNo,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null" >
        type = #{record.type,jdbcType=INTEGER},
      </if>
      <if test="record.tokenAddress != null" >
        token_address = #{record.tokenAddress,jdbcType=VARCHAR},
      </if>
      <if test="record.toblockid != null" >
        toblockid = #{record.toblockid,jdbcType=INTEGER},
      </if>
      <if test="record.state != null" >
        state = #{record.state,jdbcType=INTEGER},
      </if>
      <if test="record.reason != null" >
        reason = #{record.reason,jdbcType=VARCHAR},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update coin_hk_order
    set id = #{record.id,jdbcType=INTEGER},
      userId = #{record.userid,jdbcType=INTEGER},
      pay_num = #{record.payNum,jdbcType=VARCHAR},
      createtime = #{record.createtime,jdbcType=VARCHAR},
      bill_no = #{record.billNo,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=INTEGER},
      token_address = #{record.tokenAddress,jdbcType=VARCHAR},
      toblockid = #{record.toblockid,jdbcType=INTEGER},
      state = #{record.state,jdbcType=INTEGER},
      reason = #{record.reason,jdbcType=VARCHAR}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.liyunet.domain.hk.CoinHkOrder" >
    update coin_hk_order
    <set >
      <if test="userid != null" >
        userId = #{userid,jdbcType=INTEGER},
      </if>
      <if test="payNum != null" >
        pay_num = #{payNum,jdbcType=VARCHAR},
      </if>
      <if test="createtime != null" >
        createtime = #{createtime,jdbcType=VARCHAR},
      </if>
      <if test="billNo != null" >
        bill_no = #{billNo,jdbcType=VARCHAR},
      </if>
      <if test="type != null" >
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="tokenAddress != null" >
        token_address = #{tokenAddress,jdbcType=VARCHAR},
      </if>
      <if test="toblockid != null" >
        toblockid = #{toblockid,jdbcType=INTEGER},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="reason != null" >
        reason = #{reason,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.liyunet.domain.hk.CoinHkOrder" >
    update coin_hk_order
    set userId = #{userid,jdbcType=INTEGER},
      pay_num = #{payNum,jdbcType=VARCHAR},
      createtime = #{createtime,jdbcType=VARCHAR},
      bill_no = #{billNo,jdbcType=VARCHAR},
      type = #{type,jdbcType=INTEGER},
      token_address = #{tokenAddress,jdbcType=VARCHAR},
      toblockid = #{toblockid,jdbcType=INTEGER},
      state = #{state,jdbcType=INTEGER},
      reason = #{reason,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>