<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.liyunet.mapper.betMapper.BetUserInfoMapper">
	<resultMap id="BaseResultMap" type="com.liyunet.domain.bet.BetUserInfo">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="userId" property="userid" jdbcType="INTEGER" />
		<result column="notes" property="notes" jdbcType="VARCHAR" />
		<result column="bidt" property="bidt" jdbcType="VARCHAR" />
		<result column="createtime" property="createtime" jdbcType="VARCHAR" />
		<result column="boid" property="boid" jdbcType="INTEGER" />
		<result column="status" property="status" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria"
				separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem"
										open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, userId, notes, bidt, createtime, boid, status
	</sql>
	<select id="selectByExample" resultMap="BaseResultMap"
		parameterType="com.liyunet.domain.bet.BetUserInfoExample">
		select
		<if test="distinct">
			distinct
		</if>
		<include refid="Base_Column_List" />
		from bet_user_info
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
		<if test="orderByClause != null">
			order by ${orderByClause}
		</if>
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from bet_user_info
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		bet_user_info
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<delete id="deleteByExample" parameterType="com.liyunet.domain.bet.BetUserInfoExample">
		delete from bet_user_info
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</delete>
	<insert id="insert" parameterType="com.liyunet.domain.bet.BetUserInfo">
		insert into bet_user_info (id,
		userId, notes,
		bidt, createtime, boid,
		status)
		values
		(#{id,jdbcType=INTEGER}, #{userid,jdbcType=INTEGER},
		#{notes,jdbcType=VARCHAR},
		#{bidt,jdbcType=VARCHAR},
		#{createtime,jdbcType=VARCHAR}, #{boid,jdbcType=INTEGER},
		#{status,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="com.liyunet.domain.bet.BetUserInfo">
		insert into bet_user_info
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="userid != null">
				userId,
			</if>
			<if test="notes != null">
				notes,
			</if>
			<if test="bidt != null">
				bidt,
			</if>
			<if test="createtime != null">
				createtime,
			</if>
			<if test="boid != null">
				boid,
			</if>
			<if test="status != null">
				status,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="userid != null">
				#{userid,jdbcType=INTEGER},
			</if>
			<if test="notes != null">
				#{notes,jdbcType=VARCHAR},
			</if>
			<if test="bidt != null">
				#{bidt,jdbcType=VARCHAR},
			</if>
			<if test="createtime != null">
				#{createtime,jdbcType=VARCHAR},
			</if>
			<if test="boid != null">
				#{boid,jdbcType=INTEGER},
			</if>
			<if test="status != null">
				#{status,jdbcType=INTEGER},
			</if>
		</trim>
	</insert>
	<select id="countByExample" parameterType="com.liyunet.domain.bet.BetUserInfoExample"
		resultType="java.lang.Integer">
		select count(*) from bet_user_info
		<if test="_parameter != null">
			<include refid="Example_Where_Clause" />
		</if>
	</select>
	<update id="updateByExampleSelective" parameterType="map">
		update bet_user_info
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.userid != null">
				userId = #{record.userid,jdbcType=INTEGER},
			</if>
			<if test="record.notes != null">
				notes = #{record.notes,jdbcType=VARCHAR},
			</if>
			<if test="record.bidt != null">
				bidt = #{record.bidt,jdbcType=VARCHAR},
			</if>
			<if test="record.createtime != null">
				createtime = #{record.createtime,jdbcType=VARCHAR},
			</if>
			<if test="record.boid != null">
				boid = #{record.boid,jdbcType=INTEGER},
			</if>
			<if test="record.status != null">
				status = #{record.status,jdbcType=INTEGER},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update bet_user_info
		set id = #{record.id,jdbcType=INTEGER},
		userId =
		#{record.userid,jdbcType=INTEGER},
		notes =
		#{record.notes,jdbcType=VARCHAR},
		bidt =
		#{record.bidt,jdbcType=VARCHAR},
		createtime =
		#{record.createtime,jdbcType=VARCHAR},
		boid =
		#{record.boid,jdbcType=INTEGER},
		status =
		#{record.status,jdbcType=INTEGER}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="com.liyunet.domain.bet.BetUserInfo">
		update bet_user_info
		<set>
			<if test="userid != null">
				userId = #{userid,jdbcType=INTEGER},
			</if>
			<if test="notes != null">
				notes = #{notes,jdbcType=VARCHAR},
			</if>
			<if test="bidt != null">
				bidt = #{bidt,jdbcType=VARCHAR},
			</if>
			<if test="createtime != null">
				createtime = #{createtime,jdbcType=VARCHAR},
			</if>
			<if test="boid != null">
				boid = #{boid,jdbcType=INTEGER},
			</if>
			<if test="status != null">
				status = #{status,jdbcType=INTEGER},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.liyunet.domain.bet.BetUserInfo">
		update
		bet_user_info
		set userId = #{userid,jdbcType=INTEGER},
		notes =
		#{notes,jdbcType=VARCHAR},
		bidt = #{bidt,jdbcType=VARCHAR},
		createtime =
		#{createtime,jdbcType=VARCHAR},
		boid = #{boid,jdbcType=INTEGER},
		status
		= #{status,jdbcType=INTEGER}
		where id = #{id,jdbcType=INTEGER}
	</update>
	<!-- æ–° -->
	<select id="selectNum" resultType="String">

		select SUM(CAST(bu.bidt AS
		DECIMAL(10,1))) from bet_user_info bu
		,bet_option_info bo where
		bo.id=bu.boid and bo.bid=#{id} 


	</select>
	<select id="selectCount" resultType="String">

		select COUNT(*) from (select
		COUNT(*) from bet_user_info bu ,bet_option_info bo where bo.id=bu.boid
		and bo.bid=#{id}  GROUP BY bu.userId ) a
	</select>

	<select id="selectsingleNum" resultType="Double">
		select SUM(CAST(bidt AS
		DECIMAL(10,1))) from bet_user_info where
		boid=#{id} 
		

	</select>
	<select id="selectsingleCount" resultType="Double">
		select COUNT(*) from
		(select COUNT(*) from bet_user_info where boid=#{id}
		GROUP BY userId) a


	</select>

	<select id="selectNots" resultType="Map">
			select bu.userId,SUM(bu.notes) as notes,bo.option_info,SUM(bu.bidt) as bidt,bo.id as bo  from bet_user_info
		bu ,bet_option_info bo where bo.id=bu.boid and bo.bid=#{id} GROUP BY bo,bu.userId order by SUM(bu.bidt) desc
	</select>

	<select id="selectsumByop" resultType="String">


		select SUM(CAST(bidt AS
		DECIMAL(10,1))) from bet_user_info where
		boid=#{id}
		and
		userId=#{userId}
	</select>
	
	<select id="selectPeopleBid" resultMap="BaseResultMap">
	select bu.* from bet_user_info bu,bet_option_info bo where bu.boid=bo.id and bo.bid=#{id}
	</select>
</mapper>